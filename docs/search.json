[
  {
    "objectID": "linux_wsl2.html",
    "href": "linux_wsl2.html",
    "title": "Linux Installation using WSL2",
    "section": "",
    "text": "Important\n\n\n\nThis is preferred Method for Windows\n\n\nOne of preferred methods to install Linux on Windows is via installing Windows Subsystem for Linux (WSL). Windows Subsystem for Linux (WSL) allows you to install a complete Ubuntu terminal environment in minutes on your Windows machine, allowing you to develop cross-platform applications without leaving Windows (“Install Ubuntu on WSL2 on Windows 10” (2023)).\n\n\n\n\nInstall WSL: Search for Windows PowerShell in your Windows search bar, then select Run as administrator. At the command prompt type: wsl --install. Once the process is complete, restart your computer.\nDownload Ubuntu: Open the Microsoft store app and search for Ubuntu of your choice (Ubuntu 22.04.2 LTS). Click on Get and Ubuntu will then install on your machine.\nConfigure Ubuntu: Open Ubuntu terminal on your Windows machine. Once Ubuntu has finished its initial setup you will need to create a username and password (this does not need to match your Windows user credentials).\nNext, in the Ubuntu terminal run the command sudo apt update and followed by sudo apt upgrade command (Press Y when prompted).\n\n\n\nOnce your installation of Ubuntu is complete, Go to the Window button and search for the Ubuntu app on your computer. Install the following packages using command sudo apt install package_name on the machine via the Terminal:\n\ngcc\nmake\njava 8\npython\nssh\n\n\n\n\n\n\n\n\nNote\n\n\n\nWSL2 for Windows 11 (“Install Ubuntu on WSL2 and get started with graphical applications” (2023)) comes with WSLg enabled by default. WSLg allows you to run graphical linux applications. For more information, please click here.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf Ubuntu returns an error during this initial installation, then the most common issue is that virtualization is disabled in your device’s BIOS menu. You will need to turn this on during your device’s boot sequence. The location of this option varies by manufacturer, so you will need to refer to their documentation to find it."
  },
  {
    "objectID": "linux_wsl2.html#windows-10-and-windows-11",
    "href": "linux_wsl2.html#windows-10-and-windows-11",
    "title": "Linux Installation using WSL2",
    "section": "",
    "text": "Install WSL: Search for Windows PowerShell in your Windows search bar, then select Run as administrator. At the command prompt type: wsl --install. Once the process is complete, restart your computer.\nDownload Ubuntu: Open the Microsoft store app and search for Ubuntu of your choice (Ubuntu 22.04.2 LTS). Click on Get and Ubuntu will then install on your machine.\nConfigure Ubuntu: Open Ubuntu terminal on your Windows machine. Once Ubuntu has finished its initial setup you will need to create a username and password (this does not need to match your Windows user credentials).\nNext, in the Ubuntu terminal run the command sudo apt update and followed by sudo apt upgrade command (Press Y when prompted).\n\n\n\nOnce your installation of Ubuntu is complete, Go to the Window button and search for the Ubuntu app on your computer. Install the following packages using command sudo apt install package_name on the machine via the Terminal:\n\ngcc\nmake\njava 8\npython\nssh\n\n\n\n\n\n\n\n\nNote\n\n\n\nWSL2 for Windows 11 (“Install Ubuntu on WSL2 and get started with graphical applications” (2023)) comes with WSLg enabled by default. WSLg allows you to run graphical linux applications. For more information, please click here.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf Ubuntu returns an error during this initial installation, then the most common issue is that virtualization is disabled in your device’s BIOS menu. You will need to turn this on during your device’s boot sequence. The location of this option varies by manufacturer, so you will need to refer to their documentation to find it."
  },
  {
    "objectID": "eclipse.html",
    "href": "eclipse.html",
    "title": "Eclipse IDE for C Programming",
    "section": "",
    "text": "Several different compilers are available to you, depending on your computer’s operating system and requirements.\n\nAll the assignments for this course will need GNU Compiler Collection (gcc) compiler. Generally, you can use Cygwin/Xcode developer tools for most assignments, but some may require a Linux GCC compiler.\nIf you are comfortable with Eclipse, install it on your computer system by following the instructions from Bohr1. For GCC compiler, we will connect the docker container gcc setup above to Eclipse.\n\n\nConnecting to Docker ContainersConnecting to WSL2\n\n\n\nOnce Eclipse is installed, there is a docker plugin for Eclipse, using which you can perform many of the mentioned Docker tasks from within Eclipse. To install the plugin in Eclipse, from the menu, click on Help –&gt; install –&gt; Eclipse Marketplace –&gt; Search for Eclipse Docker Tooling and install it.\nYou can switch to the Docker Tooling perspective (either click on the Open Perspective toolbar button at the top-right of the editor window or select from the Window | Perspective | Open Perspective | Other menu).\nMake sure your CDT for Eclipse is set up, open the perspective, and create a C programming project.\nOpen the Project Properties by right-clicking Project &gt; Properties.\nIn Properties, select C/C++ Build &gt; Settings and open the Container Settings tab to set the following:\n\nConfiguration: Default [Active]\nConnection: http://localhost:2375 for Windows and on Mac unix:///var/run/docker.sock\nImage: gcc:latest (or any other name that you are using for docker containers)\n\nCheck Build Inside Docker Image.\nSelect the docker image to use. If there are no images listed, verify that Docker is running.\nClick Apply and Close\nTo compile the program: Click the Build Icon and Confirm that the console prints “Running in image…”\nTo run the program, either:\n\n\nCreate a Run Configuration with Run &gt; Run Configurations.\nCreate a new C/C++ Container Launcher.\nPass the arguments needed, such as file names.\nOn the container tab, verify the gcc:latest image selected and click on Run.\n\n\nOR\n\nRight-click on the project –&gt; Build Targets –&gt; Create Targets and under that, create a name of the target, e.g., runq1 and command make as given below:\n\n\nClick save and select the target to run the program under Build Targets.\n\nClick the Run icon.\nConfirm that the console prints Running in image....\n\n\n\n\nIf you chose to use WSL, then you can add Ubuntu Terminal to Eclipse:\nOn Eclipse: Navigate to Windows -&gt; Preferences -&gt; Terminal -&gt; Local Terminal\nAdd the following entry\nname: WSL Bash\npath: C:\\Windows\\System32\\wsl.exe\nOn the Project Explorer: On any file, right-click -&gt; show in… -&gt; WLS Bash.\nIt will open the project folder in the Terminal, and you can use the Makefile commands to execute your code."
  },
  {
    "objectID": "eclipse.html#footnotes",
    "href": "eclipse.html#footnotes",
    "title": "Eclipse IDE for C Programming",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThanks to Mr. David Brown.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Software Installation",
    "section": "",
    "text": "Software Installation\nFor the course and assignments, we would be using a Linux Operating System and an IDE to write C programs, So let’s start with deploying Linux on your host operating system (if you are already using Linux, then you can skip the following text). There are various methods to install Linux, and you can choose either that works best for you and is compatible with your operating system (OS).\n\n\n\n\n\n\nNote\n\n\n\nThis document refers to the most current versions of IDEs as of this writing. Note that different computer setups and different versions mean that the appearance of the screenshots in these documents may not match exactly your computer system.\n\n\nThe following steps will assist you to install VSCode on your computer.\n\nConnect to Laurier’s Hopper Server using Laurier Credentials\nInstall Linux operating system on Host OS via WSL2\nInstall Linux operating system on Host OS via Dockers\nInstall VSCode\nInstall Eclipse"
  },
  {
    "objectID": "vscode.html",
    "href": "vscode.html",
    "title": "Visual Studio Code Installation",
    "section": "",
    "text": "In your browser, navigate to Visual Studio Code download page. The web page displays logos for Windows, macOS, and Linux\nDownload the VSCode installer for Windows/Mac/Linux. Once it is downloaded, run the installer.\nAfter accepting all the requests, press the finish button.\nOpen the VSCode to verify the installation.\nNow, install the Remote Development extension pack. It will let us open any folder in a container, on a remote machine, or in the Windows Subsystem for Linux (WSL) and take advantage of VS Code’s full feature set.\n\n\nConnecting to Docker ContainersConnecting to WSL2\n\n\n\nTo open a CP386 workspace in a Linux environment and using IDE, follow the steps:\nStart VS Code, run the Dev Containers: Open Folder in Container… command from the Command Palette (F1) or quick actions Status bar item, and select the project folder you would like to set up the container for:\nNow, pick a starting point for your dev container and follow the steps below:\nStep 1:\n\n - Step 2:\n - Step 3:\n - Step 4:\n\n\nThe VS Code window will reload and start building the dev container. A progress notification provides status updates. Now, you can open Terminal and can run makefile. Enjoy your programming.\n\n\n\n\nIf you chose to use WSL then you can connect VSCode to WSL2:\nStart VS Code.\nPress F1, select WSL: New WSL Window for the default distro or WSL: New WSL Window using Ubuntu for a specific version.\nUse the File menu to open your folder.\n\n\n\n\n\n\n\n\nDocstrings help understand code functionality and are essential for writing clean and well-documented programs. This extension will assist you in automatically creating default documentation whenever you create a new a Python function (Nils Werner (2023)).\nThe autoDocstring extension helps us quickly generate docstring for Python functions. By typing triple quotes ““” or ’’’ within the function, we can generate and modify docstring.\n\nIn VSCode, select View -&gt; Extensions or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view. It will display all the extensions available for VSCode.\nIn the search bar at the top of the Extensions view, type “AutoDocString”.\nFrom the search results, locate the “AutoDocString” extension by Nils Werner and select “Install”.\nAfter installation, the button will change to “Reload” - click on it to reload Visual Studio Code and activate the extension."
  },
  {
    "objectID": "vscode.html#vscode-extensions",
    "href": "vscode.html#vscode-extensions",
    "title": "Visual Studio Code Installation",
    "section": "",
    "text": "Docstrings help understand code functionality and are essential for writing clean and well-documented programs. This extension will assist you in automatically creating default documentation whenever you create a new a Python function (Nils Werner (2023)).\nThe autoDocstring extension helps us quickly generate docstring for Python functions. By typing triple quotes ““” or ’’’ within the function, we can generate and modify docstring.\n\nIn VSCode, select View -&gt; Extensions or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view. It will display all the extensions available for VSCode.\nIn the search bar at the top of the Extensions view, type “AutoDocString”.\nFrom the search results, locate the “AutoDocString” extension by Nils Werner and select “Install”.\nAfter installation, the button will change to “Reload” - click on it to reload Visual Studio Code and activate the extension."
  },
  {
    "objectID": "linux_docker.html",
    "href": "linux_docker.html",
    "title": "Linux Installation using Docker Containers",
    "section": "",
    "text": "Linux Installation using Docker Containers\nLinux containers comprise a considerable percentage of the overall container ecosystem and are fundamental to developer experiences and production environments. It is now possible to install Linux on Windows/MacOS using the power of Docker technology.\n\nWindowsMacOS\n\n\n\nDownload Docker for Windows from Docker Store.\nThen, double-click on the Docker Desktop Installer.exe to run the installer.\nOnce you start the installation process (note for Windows: always enable Hyper-V Windows Feature on the Configuration page).\nThen, follow the installation process to allow the installer and wait till the process is done.\nAfter completion of the installation process, click Close and Restart.\nStart Docker Desktop Tool.\n\nNote: After the installation process is complete, the tool does not start automatically. To start the Docker tool, search for the tool, and select Docker Desktop in your desktop search results.\n\nBefore starting the application, Docker offers an onboarding tutorial. The tutorial explains how to build a Docker image and run a container.\nYou are now successfully running Docker Desktop on Windows.\nFor C programming development, we will be using a docker image of the GCC compiler; kindly follow the steps:\nOpen Windows PowerShell and command prompt type docker info if you see a long message about the Docker and its parameters. Then proceed to the following steps, but if you see an error message, make sure to start the docker desktop app.\n\n\n\n\nDownload Docker for Mac from Docker Store based on the chip.\nThen, double-click on the Docker.dmg to run the installer.\nThen, follow the installation process to allow the installer and wait till the process is done.\nAfter completion of the installation process, click Close and Restart.\nStart Docker Desktop Tool.\n\nNote: After the installation process is complete, the tool does not start automatically. To start the Docker tool, search for the tool, and select Docker Desktop in your desktop search results.\n\nBefore starting the application, Docker offers an onboarding tutorial. The tutorial explains how to build a Docker image and run a container.\nYou are now successfully running Docker Desktop on Windows/Mac.\nFor C programming development, we will be using a docker image of the GCC compiler; kindly follow the steps:\nOpen Terminal on Mac and command prompt type docker info if you see a long message about the Docker and its parameters. Then proceed to the following steps, but if you see an error message, make sure to start the docker desktop app.\n\n\n\n\n\nNow, type docker pull gcc it will take some time, and go to the next step when done.\ntype docker run -d -t --name cp386_container gcc:latest to run the container.\nOnce you become comfortable with the docker containers, you can use the following commands to start, stop and run the container.\n\nTo stop the container, use docker stop cp386_container command.\nTo start the container, use docker start cp386_container command.\n\nThe last step on Windows is to go to the docker desktop app –&gt; settings and check the option “Expose daemon on tcp://localhost:2375 without TLS” and save and restart the Docker Desktop app."
  },
  {
    "objectID": "python_extensions.html",
    "href": "python_extensions.html",
    "title": "Installation of Python Extensions for VSCode",
    "section": "",
    "text": "The Python extension for VSCode provides visual cues, such as color coding and autocomplete, and debugging tools to help you write better Python code, and to write code faster (“Visual Studio Code Documentation: Python” (2023)). To install the Python extension in VSCode:\n\nIn VSCode, select View -&gt; Extensions or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view. It will display all the extensions available for VSCode.\nIn search bar at the top of the Extensions view, type Python to filter extensions to find required extension. Select Python published by Microsoft (described as IntelliSense (Pylance)) and select Install.\n\n\n\n\n\n\n\nNote\n\n\n\nAfter you install the Python extension, you may see a dialog box that asks you whether you want to install the command line developer tools. You should select Install. You’ll need to agree to the Command Line Tools License Agreement. This installation process may take sometime to complete. After the installation is complete, a dialog box appears stating that the software is installed. Select Done to proceed.\n\n\n\n\n\nDocstrings help understand code functionality and are essential for writing clean and well-documented programs. This extension will assist you in automatically creating default documentation whenever you create a new a Python function (Nils Werner (2023)).\nThe autoDocstring extension helps us quickly generate docstring for Python functions. By typing triple quotes ““” or ’’’ within the function, we can generate and modify docstring.\n\nIn VSCode, select View -&gt; Extensions or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view. It will display all the extensions available for VSCode.\nIn the search bar at the top of the Extensions view, type “AutoDocString”.\nFrom the search results, locate the “AutoDocString” extension by Nils Werner and select “Install”.\nAfter installation, the button will change to “Reload” - click on it to reload Visual Studio Code and activate the extension."
  },
  {
    "objectID": "python_extensions.html#python-extension",
    "href": "python_extensions.html#python-extension",
    "title": "Installation of Python Extensions for VSCode",
    "section": "",
    "text": "The Python extension for VSCode provides visual cues, such as color coding and autocomplete, and debugging tools to help you write better Python code, and to write code faster (“Visual Studio Code Documentation: Python” (2023)). To install the Python extension in VSCode:\n\nIn VSCode, select View -&gt; Extensions or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view. It will display all the extensions available for VSCode.\nIn search bar at the top of the Extensions view, type Python to filter extensions to find required extension. Select Python published by Microsoft (described as IntelliSense (Pylance)) and select Install.\n\n\n\n\n\n\n\nNote\n\n\n\nAfter you install the Python extension, you may see a dialog box that asks you whether you want to install the command line developer tools. You should select Install. You’ll need to agree to the Command Line Tools License Agreement. This installation process may take sometime to complete. After the installation is complete, a dialog box appears stating that the software is installed. Select Done to proceed."
  },
  {
    "objectID": "python_extensions.html#autodocstring-extension",
    "href": "python_extensions.html#autodocstring-extension",
    "title": "Installation of Python Extensions for VSCode",
    "section": "",
    "text": "Docstrings help understand code functionality and are essential for writing clean and well-documented programs. This extension will assist you in automatically creating default documentation whenever you create a new a Python function (Nils Werner (2023)).\nThe autoDocstring extension helps us quickly generate docstring for Python functions. By typing triple quotes ““” or ’’’ within the function, we can generate and modify docstring.\n\nIn VSCode, select View -&gt; Extensions or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view. It will display all the extensions available for VSCode.\nIn the search bar at the top of the Extensions view, type “AutoDocString”.\nFrom the search results, locate the “AutoDocString” extension by Nils Werner and select “Install”.\nAfter installation, the button will change to “Reload” - click on it to reload Visual Studio Code and activate the extension."
  },
  {
    "objectID": "hopper.html",
    "href": "hopper.html",
    "title": "Administration",
    "section": "",
    "text": "In order to work effectively in this course, you must have the following:\n\na Laurier email address.\n(an account on the department’s Linux server hopper)1.\n\n\n\nFor most of the assignments you will be using Linux Operating systems. With this option, you need not install any additional software on your system, rather you can work on your assignments using the department’s Linux server hopper, named after Rear Admiral Grace Hopper, a pioneer in the computer science field. hopper is running Oracle Linux 7. If you want you can use any SSH client software like putty to login into the hopper terminal.\n\n\n\nWhen you connect hopper via ssh to opens a simple console window that gives you command line access to your account on hopper. The account uses your Laurier login based upon your surname and student ID number.\nWhen logging in the console window will ask information for the first time something like this:\n\nYou are first asked for your login, then for your password.\nYour password is not displayed as you type it.\nPress the enter key when you have finished typing your password.\nhopper then gives you the system command-line prompt. (Note: when logging into hopper you may not be asked for your password as it is picked up from the machine you are running putty on. This is not a problem.)\nYou may be asked to accept an SSH key - answer ‘Yes’.\n\nThe system command-line prompt (hereafter ‘prompt’) tells you where in the hopper file system you are currently located. In the example above, the user dbrown has an account in the /home/dbrown folder. As you move through the file system the prompt changes to match your current location. For most intents and purposes you have legal access to your folder in /home and any subfolders you may create only. You have read access to numerous other folders on the system, mostly for access to software. This will be discussed in greater detail in later lectures.\nTo log out of your account and automatically close the SSH client window, type exit , followed by the Enter key.\nThe default hopper shell is bash. If you wish to change to another shell you are welcome to do so, but all examples are done in bash. (If you have no idea what this means, then leave it alone.) and has gcc already installed.\nThe terminal allows you to copy and paste from its terminal window. To copy, use your mouse to highlight the text you wish to copy - it is automatically copied to the PC’s clipboard. To paste into the terminal window right-click anywhere in the window with the mouse cursor and the clipboard text will be pasted at the current location of the text cursor (not the mouse cursor).\n\n\n\nYou will be editing, compiling, and executing C programs and shell scripts on hopper . There are a number of editors available on hopper, but by far the most powerful is emacs.\nTo start emacs simply type emacs at the prompt/terminal.\nBefore we can create a C program we need to create a directory to put it in. To create a CP386 directory in your account, type the following commands at the prompt:\nmkdir CP386\ncd CP386\nThe first command creates a new directory ( mkdir - Make Directory) in your account named CP386. The second command moves your ‘focus’ to that directory ( cd - Change Directory). You should see that your prompt now shows CP386 as part of it to indicate that you are in the CP386 directory.\nNow you can create program files in the CP386 directory. To start emacs with a file (your normal approach), type emacs filename at the prompt, as in this example:\nemacs ctest.c\nwhich allows you to enter editing in Emacs\nemacs is designed to work with dozens of terminal types, and they all have their own quirks and specific types of interface. We will concern ourselves only with the keys and commends that work with hopper and putty in our labs. Should you connect to hopper from another type of terminal be aware that some of the key associations mentioned here may not work with those types - you are responsible for finding alternatives.\nThe three most important keys in emacs are:\n\nThe CTRL key, denoted as C- . Hold down the actual keyboard Ctrl key in combination with whatever other key is noted. Example: to exit emacs , press C-x C-c\nThe META key, denoted as M- . Press and release the actual keyboard Esc key followed by the next required key. Example: to move to the next word, press M-f\nThe MENU key, to activate the emacs menu bar. Press the F10 function key to bring up the menu.\n\nThe cursor control (arrow) keys work as you would expect, and the Backspace key deletes characters to its left. The Delete key does nothing (which can be a problem).\n\nVSCODEEclipse\n\n\n\n\n\nOpen the Extensions Marketplace by clicking the bottom icon on the left sidebar (four squares with one exploding out).\nSearch for “Remote-SSH” and click Install.\nThen search for “Remote Explorer” and click Install.\nYou can also access this section by pressing Ctrl+Shift+X. When you open this page you will see suggested plugins to download and install.\n\n\n\n\n\nNow that you have the plugin installed you can configure it to connect to a server. To do so, you’ll need the following pieces of information:\nThe server’s IP or hostname: hopper.wlu.ca\nThe username you’ll connect with.\nYou’ll use this information to create an SSH configuration file that Visual Studio Code can use to SSH to the server to sync files and execute code on your behalf. You will create this configuration using Visual Studio Code.\nNow you have Remote Explorer, you will see a TV like symbol on the left-hand side of the IDE there is a vertical row of icons.\n\n\n\nTo make setup easy, the extension can guide you through adding a host.\nStart by clicking on the Add New icon in the SSH Remote Explorer in the Activity Bar.\n\n\n\nYou’ll then be asked to enter the SSH connection information. You can either enter a host name or the full ssh command you would use to connect to the host from the command line:\n\n\n\nThen it will ask you to enter the password\n\n\n\nFinally, you’ll be asked to pick a config file to use\n\n\n\nThe on lower right corner of the you will be prompted with connection information\n\n\nIf it correct you will be prompted to allow the connection.\n\n\nNow, the window will open next step is to connect to folder CP386. On left panel select open folder and choose it.\n\n\nThen, select\n\n\nLastly, allow the connection and trust the authors.\n\n\nYour VSCode IDE is set to start programming with hopper Linux.\n\n\n\n\n\n\nTo code directly with VirtualBox Ubuntu Machine on all the operating systems, follow below steps to install Remote System Explorer plugin to Eclipse:\nTo get Remote System Explorer via Software Updates: From your running instance of Eclipse, choose Help &gt; Install New Software…. to open the software installation wizard.\nIn case an update site is not pre-configured, visit https://www.eclipse.org/tm/downloads.php for finding the latest update site to use.\nType “Remote” in the filter box and press ENTER to find the RSE downloads; for the stand-alone Terminal view, find “Terminal”. Select what you want to install and finish the wizard.\n\n\n\n\nRSE and Terminal Update website\n\n\n\n\n\nThe first step to connect with Remote Machine (Ubuntu Machine on VirtualBox) is to open the RSE Perspective. Follow the steps below to begin this process.\n\nOpen the Eclipse application\nSelect Window -&gt; Open Perspective -&gt; Other…\nSelect Remote System Explorer as shown in Figure below. The list of available perspectives may differ depending on which plugins are installed in Eclipse.\n\n\n\n\nOpen Perspective Dialog\n\n\n\n\n\nThis set of configuration steps assumes that Eclipse has the RSE Perspective active. Follow the steps:\n\nRight-click anywhere in the Remote Systems view\nSelect New -&gt; Connection… (Figure below).\nSelect General -&gt; SSH Only (Figure below) and click Next &gt; in the Select Remote System Type dialog.\n\n\n\n\nNew Remote Connection\n\n\n\n\n\nSelect Remote System Type\n\n\n\n\n\n\nEnter the hostname of the target home (hopper.wlu.ca) in the Host name: field\nOptionally, enter a Connection name and Description\nLeave all other options set to their defaults\n\n\n\n\nTo use the new connection:\n\nRight-click on the new connection created above in the Remote Systems View.\nSelect Connect\nSet the User ID to the LAURIER ID.\nSet the your Laurier Password.\n\nYour Eclipse IDE is set to start programming with hopper Linux."
  },
  {
    "objectID": "hopper.html#talking-to-hopper",
    "href": "hopper.html#talking-to-hopper",
    "title": "Administration",
    "section": "",
    "text": "For most of the assignments you will be using Linux Operating systems. With this option, you need not install any additional software on your system, rather you can work on your assignments using the department’s Linux server hopper, named after Rear Admiral Grace Hopper, a pioneer in the computer science field. hopper is running Oracle Linux 7. If you want you can use any SSH client software like putty to login into the hopper terminal."
  },
  {
    "objectID": "hopper.html#your-hopper-unix-account",
    "href": "hopper.html#your-hopper-unix-account",
    "title": "Administration",
    "section": "",
    "text": "When you connect hopper via ssh to opens a simple console window that gives you command line access to your account on hopper. The account uses your Laurier login based upon your surname and student ID number.\nWhen logging in the console window will ask information for the first time something like this:\n\nYou are first asked for your login, then for your password.\nYour password is not displayed as you type it.\nPress the enter key when you have finished typing your password.\nhopper then gives you the system command-line prompt. (Note: when logging into hopper you may not be asked for your password as it is picked up from the machine you are running putty on. This is not a problem.)\nYou may be asked to accept an SSH key - answer ‘Yes’.\n\nThe system command-line prompt (hereafter ‘prompt’) tells you where in the hopper file system you are currently located. In the example above, the user dbrown has an account in the /home/dbrown folder. As you move through the file system the prompt changes to match your current location. For most intents and purposes you have legal access to your folder in /home and any subfolders you may create only. You have read access to numerous other folders on the system, mostly for access to software. This will be discussed in greater detail in later lectures.\nTo log out of your account and automatically close the SSH client window, type exit , followed by the Enter key.\nThe default hopper shell is bash. If you wish to change to another shell you are welcome to do so, but all examples are done in bash. (If you have no idea what this means, then leave it alone.) and has gcc already installed.\nThe terminal allows you to copy and paste from its terminal window. To copy, use your mouse to highlight the text you wish to copy - it is automatically copied to the PC’s clipboard. To paste into the terminal window right-click anywhere in the window with the mouse cursor and the clipboard text will be pasted at the current location of the text cursor (not the mouse cursor)."
  },
  {
    "objectID": "hopper.html#editing",
    "href": "hopper.html#editing",
    "title": "Administration",
    "section": "",
    "text": "You will be editing, compiling, and executing C programs and shell scripts on hopper . There are a number of editors available on hopper, but by far the most powerful is emacs.\nTo start emacs simply type emacs at the prompt/terminal.\nBefore we can create a C program we need to create a directory to put it in. To create a CP386 directory in your account, type the following commands at the prompt:\nmkdir CP386\ncd CP386\nThe first command creates a new directory ( mkdir - Make Directory) in your account named CP386. The second command moves your ‘focus’ to that directory ( cd - Change Directory). You should see that your prompt now shows CP386 as part of it to indicate that you are in the CP386 directory.\nNow you can create program files in the CP386 directory. To start emacs with a file (your normal approach), type emacs filename at the prompt, as in this example:\nemacs ctest.c\nwhich allows you to enter editing in Emacs\nemacs is designed to work with dozens of terminal types, and they all have their own quirks and specific types of interface. We will concern ourselves only with the keys and commends that work with hopper and putty in our labs. Should you connect to hopper from another type of terminal be aware that some of the key associations mentioned here may not work with those types - you are responsible for finding alternatives.\nThe three most important keys in emacs are:\n\nThe CTRL key, denoted as C- . Hold down the actual keyboard Ctrl key in combination with whatever other key is noted. Example: to exit emacs , press C-x C-c\nThe META key, denoted as M- . Press and release the actual keyboard Esc key followed by the next required key. Example: to move to the next word, press M-f\nThe MENU key, to activate the emacs menu bar. Press the F10 function key to bring up the menu.\n\nThe cursor control (arrow) keys work as you would expect, and the Backspace key deletes characters to its left. The Delete key does nothing (which can be a problem).\n\nVSCODEEclipse\n\n\n\n\n\nOpen the Extensions Marketplace by clicking the bottom icon on the left sidebar (four squares with one exploding out).\nSearch for “Remote-SSH” and click Install.\nThen search for “Remote Explorer” and click Install.\nYou can also access this section by pressing Ctrl+Shift+X. When you open this page you will see suggested plugins to download and install.\n\n\n\n\n\nNow that you have the plugin installed you can configure it to connect to a server. To do so, you’ll need the following pieces of information:\nThe server’s IP or hostname: hopper.wlu.ca\nThe username you’ll connect with.\nYou’ll use this information to create an SSH configuration file that Visual Studio Code can use to SSH to the server to sync files and execute code on your behalf. You will create this configuration using Visual Studio Code.\nNow you have Remote Explorer, you will see a TV like symbol on the left-hand side of the IDE there is a vertical row of icons.\n\n\n\nTo make setup easy, the extension can guide you through adding a host.\nStart by clicking on the Add New icon in the SSH Remote Explorer in the Activity Bar.\n\n\n\nYou’ll then be asked to enter the SSH connection information. You can either enter a host name or the full ssh command you would use to connect to the host from the command line:\n\n\n\nThen it will ask you to enter the password\n\n\n\nFinally, you’ll be asked to pick a config file to use\n\n\n\nThe on lower right corner of the you will be prompted with connection information\n\n\nIf it correct you will be prompted to allow the connection.\n\n\nNow, the window will open next step is to connect to folder CP386. On left panel select open folder and choose it.\n\n\nThen, select\n\n\nLastly, allow the connection and trust the authors.\n\n\nYour VSCode IDE is set to start programming with hopper Linux.\n\n\n\n\n\n\nTo code directly with VirtualBox Ubuntu Machine on all the operating systems, follow below steps to install Remote System Explorer plugin to Eclipse:\nTo get Remote System Explorer via Software Updates: From your running instance of Eclipse, choose Help &gt; Install New Software…. to open the software installation wizard.\nIn case an update site is not pre-configured, visit https://www.eclipse.org/tm/downloads.php for finding the latest update site to use.\nType “Remote” in the filter box and press ENTER to find the RSE downloads; for the stand-alone Terminal view, find “Terminal”. Select what you want to install and finish the wizard.\n\n\n\n\nRSE and Terminal Update website\n\n\n\n\n\nThe first step to connect with Remote Machine (Ubuntu Machine on VirtualBox) is to open the RSE Perspective. Follow the steps below to begin this process.\n\nOpen the Eclipse application\nSelect Window -&gt; Open Perspective -&gt; Other…\nSelect Remote System Explorer as shown in Figure below. The list of available perspectives may differ depending on which plugins are installed in Eclipse.\n\n\n\n\nOpen Perspective Dialog\n\n\n\n\n\nThis set of configuration steps assumes that Eclipse has the RSE Perspective active. Follow the steps:\n\nRight-click anywhere in the Remote Systems view\nSelect New -&gt; Connection… (Figure below).\nSelect General -&gt; SSH Only (Figure below) and click Next &gt; in the Select Remote System Type dialog.\n\n\n\n\nNew Remote Connection\n\n\n\n\n\nSelect Remote System Type\n\n\n\n\n\n\nEnter the hostname of the target home (hopper.wlu.ca) in the Host name: field\nOptionally, enter a Connection name and Description\nLeave all other options set to their defaults\n\n\n\n\nTo use the new connection:\n\nRight-click on the new connection created above in the Remote Systems View.\nSelect Connect\nSet the User ID to the LAURIER ID.\nSet the your Laurier Password.\n\nYour Eclipse IDE is set to start programming with hopper Linux."
  },
  {
    "objectID": "hopper.html#footnotes",
    "href": "hopper.html#footnotes",
    "title": "Administration",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThanks to Mr. David Brown.↩︎"
  }
]